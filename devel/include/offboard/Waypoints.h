// Generated by gencpp from file offboard/Waypoints.msg
// DO NOT EDIT!


#ifndef OFFBOARD_MESSAGE_WAYPOINTS_H
#define OFFBOARD_MESSAGE_WAYPOINTS_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace offboard
{
template <class ContainerAllocator>
struct Waypoints_
{
  typedef Waypoints_<ContainerAllocator> Type;

  Waypoints_()
    : x()
    , y()  {
    }
  Waypoints_(const ContainerAllocator& _alloc)
    : x(_alloc)
    , y(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _x_type;
  _x_type x;

   typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _y_type;
  _y_type y;




  typedef boost::shared_ptr< ::offboard::Waypoints_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::offboard::Waypoints_<ContainerAllocator> const> ConstPtr;

}; // struct Waypoints_

typedef ::offboard::Waypoints_<std::allocator<void> > Waypoints;

typedef boost::shared_ptr< ::offboard::Waypoints > WaypointsPtr;
typedef boost::shared_ptr< ::offboard::Waypoints const> WaypointsConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::offboard::Waypoints_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::offboard::Waypoints_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace offboard

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'offboard': ['/home/kimbowon/catkin_ws/src/offboard_control/msg'], 'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/indigo/share/geometry_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::offboard::Waypoints_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::offboard::Waypoints_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::offboard::Waypoints_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::offboard::Waypoints_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::offboard::Waypoints_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::offboard::Waypoints_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::offboard::Waypoints_<ContainerAllocator> >
{
  static const char* value()
  {
    return "462ac0ba687f22c2e73c0ec0413e0202";
  }

  static const char* value(const ::offboard::Waypoints_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x462ac0ba687f22c2ULL;
  static const uint64_t static_value2 = 0xe73c0ec0413e0202ULL;
};

template<class ContainerAllocator>
struct DataType< ::offboard::Waypoints_<ContainerAllocator> >
{
  static const char* value()
  {
    return "offboard/Waypoints";
  }

  static const char* value(const ::offboard::Waypoints_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::offboard::Waypoints_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32[] x\n\
float32[] y\n\
";
  }

  static const char* value(const ::offboard::Waypoints_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::offboard::Waypoints_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.x);
      stream.next(m.y);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Waypoints_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::offboard::Waypoints_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::offboard::Waypoints_<ContainerAllocator>& v)
  {
    s << indent << "x[]" << std::endl;
    for (size_t i = 0; i < v.x.size(); ++i)
    {
      s << indent << "  x[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.x[i]);
    }
    s << indent << "y[]" << std::endl;
    for (size_t i = 0; i < v.y.size(); ++i)
    {
      s << indent << "  y[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.y[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // OFFBOARD_MESSAGE_WAYPOINTS_H
